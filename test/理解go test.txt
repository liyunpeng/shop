Go语言的 testing 包提供了三种测试方式，分别是单元（功能）测试、性能（压力）测试和覆盖率测试。

测试用例文件不会参与正常源码的编译，不会被包含到可执行文件中；
测试用例的文件名必须以_test.go结尾；
需要使用 import 导入 testing 包；
测试函数的名称要以Test或Benchmark开头，后面可以跟任意字母组成的字符串，但第一个字母必须大写，例如 TestAbc()，一个测试用例文件中可以包含多个测试函数；
单元测试则以(t *testing.T)作为参数，性能测试以(t *testing.B)做为参数；
测试用例文件使用go test命令来执行，源码中不需要 main() 函数作为入口，所有以_test.go结尾的源码文件内以Test开头的函数都会自动执行。

以下都是本目录的代码测试。
单元测试：
$ go test -v adder_test.go
=== RUN   TestAdd
--- PASS: TestAdd (0.00s)
=== RUN   ExampleAdd
--- PASS: ExampleAdd (0.00s)
PASS
ok      command-line-arguments  0.334s

性能测试：
$ go test -bench="."
B.N= 1
goos: windows
goarch: amd64
pkg: my.study/test
BenchmarkAdd-4          B.N= 100
B.N= 10000
B.N= 1000000
B.N= 100000000
B.N= 1000000000
1000000000               0.339 ns/op
B.N= 1
BenchmarkHeap-4         B.N= 100
B.N= 10000
B.N= 1000000
B.N= 100000000
B.N= 1000000000
1000000000               0.332 ns/op
PASS
ok      my.study/test   1.093s

$ cd bench/
$ go test -bench="."
goos: windows
goarch: amd64
pkg: my.study/test/bench
Benchmark_Division-4                    1000000000               0.332 ns/op
Benchmark_TimeConsumingFunction-4       1000000000               0.336 ns/op
PASS
ok      my.study/test/bench     1.094s
