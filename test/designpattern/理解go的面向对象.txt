---
Golang没有完整实现继承，而是通过组合的方式实现。
组合类（子类）可以直接调用被组合类（基类）的公有方法，访问基类的公有属性，
子类也可以定义自己的属性，以及实现自己特有的方法。
Golang的设计哲学之一就是简洁，通过大小写区分成员/方法的公有/私有属性，
通过组合的方式实现继承，都是简洁哲学的体现。


继承是is-a的关系，组合一般理解为 has-a 的关系
---
继承的优缺点
优点：
1，类继承简单粗爆，直观，关系在编译时静态定义。
2，被复用的实现易于修改，sub可以覆盖super的实现。
缺点：
1，无法在运行时变更从super继承来的实现（也不一定是缺点）
2，sub的部分实现通常定义在super中。
3，sub直接面对super的实现细节，因此破坏了封装。
4，super实现的任何变更都会强制子类也进行变更，因为它们的实现联系在了一起。
5，如果在新的问题场景下继承来的实现已过时或不适用，所以必须重写super或继承来的实现。
由于在类继承中，实现的依存关系，对子类进行复用可能会有问题。
有一个解决办法是，只从协议或抽象基类继承(子类型化)，国为它们只对很少的实现，而协议则没有实现。

---
组合的优缺点
对象组合让我们同时使用多个对象，而每个对象都假定其他对象的接口正常运行。
因此，为了在系统中正常运行，它们的接口都需要经过精心的设计。下面我就来说说他的优缺点
优点：
1，不会破坏封装，因为只通过接口来访问对象；
2，减少实现的依存关系，因为实面是通过接口来定义的；
3，可以在运行时将任意对象替换为其他同类型的对象；
4，可以保持类的封装以专注于单一任务；
5，类和他的层次结构能保持简洁，不至于过度膨胀而无法管理；
缺点：
1，涉及对象多；
2，系统的行为将依赖于不同对象间的关系，而不是定义于单个类中；
3，现成的组件总是不太够用，从而导致我们要不停的定义新对象。

---
总结来看，我认为，组合相对于继承的优点在于
可以利用面向接口编程原则的一系列优点，封装性好，耦合性低
相对于继承的编译期确定实现，组合的运行态指定实现，更加灵活
组合是非侵入式的，继承是侵入式的