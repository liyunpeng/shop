---
用扩展实现变化，不用修改实现变化
软件对象（类、模块、方法等）应该对于扩展是开放的，对修改是关闭的。
比如：一个网络模块，原来只有服务端功能，而现在要加入客户端功能，
那么应当在不用修改服务端功能代码的前提下，就能够增加客户端功能的实现代码，
这要求在设计之初，就应当将客户端和服务端分开。公共部分抽象出来。

---
问题由来：
在软件的生命周期内，
因为变化、升级和维护等原因需要对软件原有代码进行修改时，
可能会给旧代码中引入错误，
也可能会使我们不得不对整个功能进行重构，
并且需要原有代码经过重新测试。

---
解决办法：
当软件需要变化时，尽量通过扩展软件实体的行为来实现变化，
而不是通过修改已有的代码来实现变化。
开闭原则是面向对象设计中最基础的设计原则，
它指导我们如何建立稳定灵活的系统。
我们遵循设计模式前面5大原则，以及使用23种设计模式的目的就是遵循开闭原则。
只要我们对前面5项原则遵守的好了，
设计出的软件自然是符合开闭原则的，
这个开闭原则更像是前面五项原则遵守程度的"平均得分"，前面5项原则遵守的好，平均分自然就高，
说明软件设计开闭原则遵守的好；
如果前面5项原则遵守的不好，则说明开闭原则遵守的不好。
其实笔者认为，开闭原则无非就是想表达这样一层意思：
用抽象构建框架，用实现扩展细节。因为抽象灵活性好，适应性广，
只要抽象的合理，可以基本保持软件架构的稳定。
而软件中易变的细节，我们用从抽象派生的实现类来进行扩展，
当软件需要发生变化时，我们只需要根据需求重新派生一个实现类来扩展就可以了。
当然前提是我们的抽象要合理，要对需求的变更有前瞻性和预见性才行。
说到这里，再回想一下前面说的5项原则，
恰恰是告诉我们用抽象构建框架，用实现扩展细节的注意事项而已：
单一职责原则告诉我们实现类要职责单一；
里氏替换原则告诉我们不要破坏继承体系；
依赖倒置原则告诉我们要面向接口编程；
接口隔离原则告诉我们在设计接口的时候要精简单一；
迪米特法则告诉我们要降低耦合。
而开闭原则是总纲，他告诉我们要对扩展开放，对修改关闭。

---
为什么使用开闭原则？
　　1、只要是面向对象的编程，在开发过程中都会强调开闭原则
　　2、是最基础的设计原则，其他五个设计原则都是开闭原则的具体形态
　　3、可以提高代码的复用性
　　4、可以提高代码的可维护性

---
如何使用开闭原则？
　　1、抽象约束
        抽象对一组事物的通用描述，没有具体的实现，
        也就表示它可以有非常多的可能性，可以跟随需求的变化而变化。
        因此，通过接口或抽象类可以约束一组可能变化的行为，并且能够实现对扩展开放。
　　2、元数据控件模块行为　　　　
　　3、制定项目章程
　　4、封装变化
        将相同的变化封装到一个接口或抽象类中，将不同的变化封装到不同的接口或抽象类中，
        不应该有两个不同变化出现在同一个接口或抽象类中。
