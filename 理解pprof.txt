 软件开发过程中，项目上线并不是终点。
 上线后，还要对程序的取样分析运行情况，并重构现有的功能，让程序执行更高效更稳写。
 golang的工具包内自pprof功能，使找出程序中占内存和CPU较多的部分功能方便了不少。
 加上uber的火焰图，可视化显示，让我们在分析程序时更简单明了。

pprof有两个包用来分析程序一个是net/http/pprof, 另一个是runtime/pprof，
net/http/pprof只是对runtime/pprof包进行封装并用http暴露出来，

---
使用：
代码上只需要添加：
import  _ "net/http/pprof"

go func () {
   err := http.ListenAndServe(":9909", nil )
   if err != nil {
      panic(err)
   }
}()

http://localhost:9909/debug/pprof/

这几个路径表示的是

/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载
/debug/pprof/block：Goroutine阻塞事件的记录。默认每发生一次阻塞事件时取样一次。
/debug/pprof/goroutines：活跃Goroutine的信息的记录。仅在获取时取样一次。
/debug/pprof/heap： 堆内存分配情况的记录。默认每分配512K字节时取样一次。
/debug/pprof/mutex: 查看争用互斥锁的持有者。
/debug/pprof/threadcreate: 系统线程创建情况的记录。 仅在获取时取样一次。
---
交互命令：
输入top命令可以前10大的内存分配，flat是堆栈中当前层的inuse内存值，cum是堆栈中本层级的累计inuse内存值

---
win7 上安装graphviz，
1. 下载graphviz
https://graphviz.gitlab.io/_pages/Download/Download_windows.html

2. 配置path环境变量：
D:\programe\graphviz\bin

3. 确定代码里有：
	go func() {
		err := http.ListenAndServe(":9909", nil)
		if err != nil {
			panic(err)
		}
	}()

4. 运行
（1）查看cpu的：
D:\goworkspace\shop>go tool pprof -http=:6666 http://localhost:9909/debug/pprof/profile
命令行输出
Fetching profile over HTTP from http://localhost:9909/debug/pprof/profile
Saved profile in C:\Users\Administrator\pprof\pprof.samples.cpu.005.pb.gz
Serving web UI on http://localhost:6666

以网页形式显示数据， 立即弹出浏览器，

（2）查看内存的：
D:\goworkspace\shop>go tool pprof -http=:6666 http://localhost:9909/debug/pprof/heap
命令行输出：
Fetching profile over HTTP from http://localhost:9909/debug/pprof/heap
Saved profile in C:\Users\Administrator\pprof\pprof.alloc_objects.alloc_space.in
use_objects.inuse_space.003.pb.gz
Serving web UI on http://localhost:6666
sample_index "samples" must be one of: [alloc_objects alloc_space inuse_objects
inuse_space]

---
flat和flat%、sum%、cum和cum%，其中flat代表的是该函数自身代码的执行时长，
而cum代表的是该函数自身代码+所有调用的函数的执行时长。这样解释可能不太直观，
我们以下面的例子来说明，函数b由三部分组成：调用函数c、自己直接处理一些事情、调用函数d，其中调用函数c耗时1秒，
自己直接处理事情耗时3秒，调用函数d耗时2秒，那么函数b的flat耗时就是3秒，cum耗时就是6秒。

---
alloc_space 总共分配的空间大小
inuse_object 生成heap时，在用对象数
inuse_space 生成heap时，在用空间

---
交互的使用：
在交互页面中，输入list 你被profile的函数名

(pprof) list MyFunction
ROUTINE
766103 766103 (flat, cum) 7.09% of Total
39562 39562 184: list = make([]MyStruct, 0, 256)
. . 185: slotidIndex := 0
. . 186: for {
. . 187: if begin >= totalLen {
. . 188: break
. . 189: }

---
原生界面上的字段含义
Sys 进程从系统获得的内存空间，虚拟地址空间。
HeapAlloc 进程堆内存分配使用的空间，通常是用户new出来的堆对象，包含未被gc掉的。
HeapSys 进程从系统获得的堆内存，因为golang底层使用TCmalloc机制，会缓存一部分堆内存，虚拟地址空间。
PauseNs 记录每次gc暂停的时间(纳秒)，最多记录256个最新记录。
NumGC 记录gc发生的次数。

原生页面监控的都是实时的， 没F5刷新一次，值都会变化。
而通过go tool pprof -http=:6666 http://localhost:9909/debug/pprof/heap
看到的是一个瞬时的数据，相当于一个快照，不会再有变动。

---
工具安装
母亲接受一下定性的分析工具的安装
本来这个性能分析工具不包括两个工具,
一个工具是浏览器需要调用的图形工具,这个工具可以分析传入的数据然后生成图表，
那个工具就是命令，go-toch，
这个命令在有1.9版本之前, 需要手动安装,在新版的里面,这个工具已经集成了,所以不需要手动安装。
在这个命令的说明文档里面,已经明确这个工具已经是过时的， 已经不再被使用。
所以在暗中这个工具之前先看一下这个工具的说明文档， 其中有一条,就是这个工具的使用的前提条件,
刘这里面,因为新版本已经继承这个工具了，所以就没有必要再去安装了
所以现在新的版本只需要安装图形工具就可以了。
无论是苹果电脑还是 Windows 电脑，都需要手动安装这个工具。
苹果电脑安装：

---
性能分析工具的使用
性能分析用两个两种情况你总是随时的看动态的数据，
一种是在特定的时间点生成数据，或者是在指定的情况下生成数据，
实际中使用的是第二种情况，
在程序的指定地方生成数据，
这些数据会保存那个文件里面，然后再用特定的工具分析这个文件。
数据可以可以是cpu相关的， 也可以是内存相关的 ，
有专门的函数会生成这些数据。
一般会在维护的开始和结束，
在开始的地方标记这个是数据开始记录， 在数据结束地方完成数据记录， 生成文件。
如果是内存数据， 就不需要这个标记开始和结束， 直接在需要的地方保存你这数据就可以。

---

func SaveMemProf() {
	f, err := os.Create("mem.prof")
	if err != nil {
		logger.Error.Println("create mem profile file error: ", zap.Error(err))
		return
	}

	if err := pprof.WriteHeapProfile(f); err != nil {
		logger.Error.Println("could not write memory profile: ", zap.Error(err))
	}
	f.Close()
}
func StopGrpcService(){
	GrpcSever.Stop()
	pprofutil.SaveMemProf()
	logger.Info.Println(" grpc 服务结束")
}

---
性能数据的查看方式
可以用交互命令看， 也可以用web看， web看会调用图形工具。
多用web看， 直观容易理解。
每种方式下， 又分为看当前瞬时数据的，和已经记录好的数据文件。
一，web方式
1. 看当前瞬时数据的：
shop$ go tool pprof -http=:9567 http://localhost:9909/debug/pprof/heap
2。看已经记录好的数据文件：
shop$ go tool pprof -http=:9567 mem.prof

二，交互方式
在上面命令的基础上去掉-http=:9567
1. 看当前瞬时数据的：
shop$ go tool pprof http://localhost:9909/debug/pprof/heap
2。看已经记录好的数据文件：
shop$ go tool pprof mem.prof

---

gotoch这个工具已经继承系统里面了
不用安装的
用系统自带的go tool pprof 的事情起不来，
原因在于这个端口又问题
这个端口用命令看到这个端口被占用
即lsof -i :6666
但不代表这个端口就没问题








