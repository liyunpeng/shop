 软件开发过程中，项目上线并不是终点。
 上线后，还要对程序的取样分析运行情况，并重构现有的功能，让程序执行更高效更稳写。
 golang的工具包内自带pprof功能，使找出程序中占内存和CPU较多的部分功能方便了不少。
 加上uber的火焰图，可视化显示，让我们在分析程序时更简单明了。

pprof有两个包用来分析程序一个是net/http/pprof, 另一个是runtime/pprof，
net/http/pprof只是对runtime/pprof包进行封装并用http暴露出来，

---
使用：
代码上只需要添加：
import  _ "net/http/pprof"

go func () {
   err := http.ListenAndServe(":9909", nil )
   if err != nil {
      panic(err)
   }
}()

http://localhost:9909/debug/pprof/

这几个路径表示的是

/debug/pprof/profile：访问这个链接会自动进行 CPU profiling，持续 30s，并生成一个文件供下载
/debug/pprof/block：Goroutine阻塞事件的记录。默认每发生一次阻塞事件时取样一次。
/debug/pprof/goroutines：活跃Goroutine的信息的记录。仅在获取时取样一次。
/debug/pprof/heap： 堆内存分配情况的记录。默认每分配512K字节时取样一次。
/debug/pprof/mutex: 查看争用互斥锁的持有者。
/debug/pprof/threadcreate: 系统线程创建情况的记录。 仅在获取时取样一次。


---
交互命令：
输入top命令可以前10大的内存分配，flat是堆栈中当前层的inuse内存值，cum是堆栈中本层级的累计inuse内存值
