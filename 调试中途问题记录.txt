1. 批量替换文件
find  -name "*.go" | xargs  sed -i 's/github.com\/liyunpeng\///g'

2. 批量创建数据库表
加入如下代码：
models.DB.AutoMigrate(
	&models.User{},
	&models.OauthToken{},
	&models.Role{},
	&models.Permission{},
)

3.调试过程， 要反复删除数据库

4。角色表是权限表和用户表的桥梁  创建角色时，同时在casbin表中创建该角色的所有权限列表

5. 包相互依赖的问题
 package A依赖package B,同时 package B 依赖package A
 这样就会在编译时报 "import cycle not allowed"。
 如何避免重复导入包的问题，就需要在设计时规划好包。
 import cycle not allowed
 package main
 	imports shop/handler
 	imports shop/services
 	imports shop/handler
 	这里handler包和services包相互依赖问题。
 	解决的方法是， stopChan不应该放在services包里， stopChan是被所有包所共有，
 	不能放在一个具体模块的包里， 因为具体的模块要被其他模块包饮用， 回到只包相互依赖


 6. 如果没有打开网页， websocket会阻塞， 其接受消费者的通道在添满10000个缓冲区后， 也会随之而进入阻塞，
 导致消费者在发送了10000个消息时也进入阻塞， 消息会被滞留在kafka broker， 当打开页面，
 websocket会解除阻塞，连续读取通道缓冲区的数据， 会看到连续侧的如下log输出，
 向前端发送数据= //
 向前端发送数据= WriteBufferSize:
 向前端发送数据= 1024,
 向前端发送数据= //
 向前端发送数据= })
 向前端发送数据= //
 向前端发送数据= ws.OnConnection(handleConnection)
 向前端发送数据= //
 向前端发送数据= //
另一方面通道缓冲区被读走，也使得消费者也会解除阻塞，所以会间歇性的看到消费消息的log：
消费组ID=group-1，主题=nginx_log，分区=0，offset=12608，key=，value=Write

7. 信号被一个routine捕获到， 不能在被其他routine捕获到，
kafka消费者websocket退出 group-1 consume 2536 messages
kafka消费者rpc退出， group-2 consume 2536 messages

主routine 的信号没有走到。


8. http 的serve 的handle方法只有在用户请求的时候才会调用。
http.Handle("/ws", websocket.Handler(handler.Handle))

GODEBUG=gctrace=1 go run main.go 2> log_file

9.
write tcp 127.0.0.1:88->127.0.0.1:64632: use of closed network connection
func name: runtime.gopanic
file: /usr/local/go/src/runtime/panic.go, line: 679
file: /usr/local/go/src/runtime/panic.go, line: 679
panic: websockt 向客户端发送数据错误
原因：浏览器F5刷新，tcp 127.0.0.1:88->127.0.0.1:64632 这个tcp连接就断了。


10. kafka容器起不来；
docker logs kafka容器id看到：
 Will not attempt to authenticate using SASL Will not attempt to authenticate using SASL

解决办法：
关闭防火墙， 或修改IPtables 规则
 systemctl stop firewalld.service

   docker restart 63693fc078fd

11. 数据库连接参数错误问题
没有连接到数据库 err=  Error 1045: Access denied for user 'root'@'192.168.0.1' (using password: YES)
原因： 数据库用户名密码错误， 但error并没有显示具体的mysql连接参数。


12.  user权限错误问题
http://localhost:8080/#/index/userlist
networkt调试，
xhr 类型中
user api请求， 报403错误， 即虽然身份认证通过， 但没有权限获取资源，

查casbin:
goland 连接数据库：
use casbin;
show tables ;
select * from casbin_rule;

g	1	1	""	""	""	""
果然没有权限。


use gotest;
show tables ;
auth_token
gorm_goods
gorm_order
gorm_user
permissions
roles

select * from permissons;
1	2020-04-20 14:02:30	2020-04-20 14:02:30		/user/logout	DELETE/user/logout	DELETE/user/logout	DELETE
2	2020-04-20 14:02:30	2020-04-20 14:02:30		/user/logout	CONNECT/user/logout	CONNECT/user/logout	CONNECT
3	2020-04-20 14:02:30	2020-04-20 14:02:30		/user/logout	TRACE/user/logout	TRACE/user/logout	TRACE
4	2020-04-20 14:02:30	2020-04-20 14:02:30		/api/login	登录	登录	POST
5	2020-04-20 14:02:30	2020-04-20 14:02:30		/api/user	获取所有用户	获取所有用户	GET
6	2020-04-20 14:02:30	2020-04-20 14:02:30		/api/user/*	获取指定用户	获取指定用户	GET
7	2020-04-20 14:02:30	2020-04-20 14:02:30		/api/user	创建用户	创建用户	POST
8	2020-04-20 14:02:30	2020-04-20 14:02:30		/api/user	修改用户	修改用户	PUT
9	2020-04-20 14:02:30	2020-04-20 14:02:30		/api/user/insertOrUpdate	创建或修改用户	创建或修改用户	POST
10	2020-04-20 14:02:30	2020-04-20 14:02:30		/api/etcd/:key	获取etcdkeyValue	获取etcdkeyValue	GET
11	2020-04-20 14:02:30	2020-04-20 14:02:30		/api/etcd/listallkeys	获取etcdkeyValue	获取etcdkeyValue	GET
12	2020-04-20 14:02:30	2020-04-20 14:02:30		/api/database/create	创建初始数据库	创建初始数据库	POST
13	2020-04-20 14:02:30	2020-04-20 14:02:30		/api/mem/redisset	redis操作	redis操作	POST


select * from roles;
1	2020-04-20 14:02:30	2020-04-20 14:02:30		admin	超级管理员	超级管理员


func CreateSystemAdminRole(permIds []uint) *models.Role {
	aul := &validates.RoleRequest{
		Name:        "admin",
		DisplayName: "超级管理员",
		Description: "超级管理员",
	}

	role := models.GetRoleByName(aul.Name)
	if role.ID == 0 {  // 问题原因： 只为id为0的角色，添加权限
		return models.CreateRole(aul, permIds)
	} else {
		return role
	}
}

mysql> delete from roles where id = 1;
Query OK, 1 row affected (0.04 sec)

删除后， 再新建， id从2开始
mysql> select * from roles;
+----+---------------------+---------------------+------------+-------+-----------------+-----------------+
| id | created_at          | updated_at          | deleted_at | name  | display_name    | description     |
+----+---------------------+---------------------+------------+-------+-----------------+-----------------+
|  2 | 2020-04-22 12:20:31 | 2020-04-22 12:20:31 | NULL       | admin | 瓒呯骇绠＄悊鍛?     | 瓒呯骇绠＄悊鍛?
+----+---------------------+---------------------+------------+-------+-----------------+-----------------+
1 row in set (0.04 sec)

解决办法：
gotest数据库中删除角色表，权限表：
mysql> drop table permissions;
Query OK, 0 rows affected (0.07 sec)

mysql> drop table roles;
Query OK, 0 rows affected (0.07 sec)

mysql> drop table gorm_user;
Query OK, 0 rows affected (0.11 sec)

casbin数据库删除权限策略表：
mysql> drop table  casbin_rule;
Query OK, 0 rows affected (0.09 sec)

重启进程：
mysql> select * from casbin_rule;
+--------+------+--------------------------+---------+------+------+------+
| p_type | v0   | v1                       | v2      | v3   | v4   | v5   |
+--------+------+--------------------------+---------+------+------+------+
| p      | 1    | /user/logout             | DELETE  |      |      |      |
| p      | 1    | /user/logout             | CONNECT |      |      |      |
| p      | 1    | /user/logout             | TRACE   |      |      |      |
| p      | 1    | /api/login               | POST    |      |      |      |
| p      | 1    | /api/user                | GET     |      |      |      |
| p      | 1    | /api/user/*              | GET     |      |      |      |
| p      | 1    | /api/user                | POST    |      |      |      |
| p      | 1    | /api/user                | PUT     |      |      |      |
| p      | 1    | /api/user/insertOrUpdate | POST    |      |      |      |
| p      | 1    | /api/etcd/:key           | GET     |      |      |      |
| p      | 1    | /api/etcd/listallkeys    | GET     |      |      |      |
| p      | 1    | /api/database/create     | POST    |      |      |      |
| p      | 1    | /api/mem/redisset        | POST    |      |      |      |
| g      | 1    | 1                        |         |      |      |      |
+--------+------+--------------------------+---------+------+------+------+
14 rows in set (0.00 sec)
v0 存放的是角色id

13. 行锁问题


14. 消息队列，消费的消息延迟消费问题，


15。手动修改vue文件中的请求header的authorization, 浏览器f5, token expired.
[DBUG] 2020/04/22 12:34 Token extracted: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODc1MjkxODAsImlhdCI6MTU4NzUyNTU4MH0.z7bcAu5bv4c5QRbb02ED8LI_1CUGUyrtqjbnmjtz-EI
[DBUG] 2020/04/22 12:34 Error parsing token: Token is expired
[DBUG] 2020/04/22 12:35 Token extracted: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE1ODc1MjkxODAsImlhdCI6MTU4NzUyNTU4MH0.z7bcAu5bv4c5QRbb02ED8LI_1CUGUyrtqjbnmjtz-EI
[DBUG] 2020/0c4/22 12:35 Error parsing token: Token is expired

16.
http://localhost:9096/authorize
invalid_request

17.  windows 命令行乱码
命令行乱码：
chcp 65001
chcp 936

18, 解决 用户登录后， 查看用户列表， 返回403错误问题
403 表时身份认证通过， 但是该身份没有权限，
原因： casbin 没有连接上数据库，
解决办法:
conf.tml中修改：
  CasbinConnect = "root:123456@tcp(192.168.0.141:3306)/"
  改为：
  CasbinConnect = "root:root@tcp(192.168.0.141:3306)/"

19. etcd 连接超时：
在量一台主机上， 在conf.tml忘记修改etcd的地址， 导致etcd超时错误
EtcdClientInsance = NewEtcdClientWrap(
		[]string{transformConfiguration.Etcd.Addr}, 5 * time.Second)
	go func() {
		fmt.Println("到etcd服务器，按指定的键遍历键值对")
		for _, key := range etcdKeys {
			resp := EtcdClientInsance.Get(key)

etcd get key 出错： context deadline exceeded
{"level":"warn","ts":"2020-04-27T15:51:30.977+0800","caller":"clientv3/retry_interceptor.go:61","msg":"retrying of unary invoker failed","target":"endpoint://client-9eab48e3-36f2-4b2b-84c6-a0e07030a488/192.168.0.223:2379","attempt":0,"error":"rpc error: code = DeadlineExceeded desc = context deadline exceeded"}
panic: runtime error: invalid memory address or nil pointer dereference

20. 生成代码的micro版本 与 业务使用的micro版本不一致。
$ protoc -I ./source/ --go_out=protoc-gen-go:./generate --micro_out=./generate ./source/user.proto
生成代码用的版本：
client "github.com/micro/go-micro/client"
业务代码用的版本：
microClient "github.com/micro/go-micro/v2/client"
解决办法：
生产代码修改为：
client "github.com/micro/go-micro/v2/client"


21. goroutine 结束的场景有哪些

22。 redis满了如何处理


23。 db 写不进去如何处理

24。 最高并发量有多少

25. 高并发时， redis满了， db不能写， 什么方案，

26， 高并发的问题

27 项目中遇到哪些问题


